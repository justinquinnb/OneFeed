package com.justinquinnb.onefeed.customization.textstyle.indexing;

import com.justinquinnb.onefeed.JsonToString;
import com.justinquinnb.onefeed.customization.textstyle.FormattingMarkedText;
import com.justinquinnb.onefeed.customization.textstyle.TextFormatting;

import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;

// TODO change this to take the same approach as FormattingRulesets
// TODO add method to get all TextFormatting types used in the rules
/**
 * A {@link Set} of {@link FormatIndexingRule}s in the desired order of application to a marked-up {@code String}.
 * @param <T> the language that the {@link TextFormatting}s contained in the {@link FormattingMarkedText} generated by
 *           one of {@code this} ruleset's {@code FormatIndexingRule}s
 */
public class FormatIndexingRuleset<T extends TextFormatting> implements Iterable<FormatIndexingRule<T>> {
    /**
     * The name of {@code this} {@link FormatIndexingRuleset}.
     */
    private final String name;

    /**
     * The {@link Set} of {@link FormatIndexingRule}s specifying the order and logic used to parse a {@code String}'s
     * markup into a series of {@link TextFormatting}s and the locations where they're applied.
     *
     * @see FormatIndexingRule
     */
    private final LinkedHashSet<FormatIndexingRule<T>> rules;

    /**
     * Constructs a {@link FormatIndexingRuleset} with the provided {@code name} and {@link #rules}, {@code rules}.
     *
     * @param name the name of the {@code FormatIndexingRuleset} to create
     * @param rules the {@link FormatIndexingRule}s to include in {@code this} {@code FormatIndexingRuleset}
     */
    public FormatIndexingRuleset(String name, LinkedHashSet<FormatIndexingRule<T>> rules) {
        this.name = name;
        this.rules = rules;
    }

    /**
     * Gets the name of {@code this} {@link FormatIndexingRuleset}.
     *
     * @return {@code this} {@code FormatIndexingRuleset}'s name
     */
    public final String getName() {
        return name;
    }

    /**
     * Gets {@code this} {@link FormatIndexingRuleset}'s {@link #rules}.
     *
     * @return a deep copy of {@code this} {@code FormatIndexingRuleset}'s {@code #rules}
     */
    public final LinkedHashSet<FormatIndexingRule<T>> getRules() {
        return new LinkedHashSet<>(this.rules); // TODO make this actually a deep copy(?)
    }

    /**
     * Provides an iterator for {@code this} {@link FormatIndexingRuleset}s {@link #rules}.
     *
     * @return an iterator for {@code this} {@code FormatIndexingRuleset}s {@link #rules}
     */
    @Override
    public final Iterator<FormatIndexingRule<T>> iterator() {
        return this.rules.iterator();
    }

    @Override
    public String toString() {
        return JsonToString.of(this);
    }
}